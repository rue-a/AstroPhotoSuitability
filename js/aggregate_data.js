
async function get_meteo_data(lat, lon) {
    const query = `https://api.open-meteo.com/v1/gfs?forecast_days=16&latitude=${lat}&longitude=${lon}&hourly=temperature_2m,cloudcover&timezone=auto`;
    const response = await fetch(query)
    const json = await response.json();
    return json;

}


function aggregate_open_meteo(data, time_frame_len, offset, time_frame_nb) {
    /** Aggregates an Open Meteo JSON response. Open Meteo delivers an hourly weather data
     * forecast for 14 days at a given position on earth. This data is aggregated into 
     * new predefined timeframes (>= 1 h). 
     * 
     * @param {object} data the open meteo response 
     * @param {number} time_frame_len length of each timeframe in hours
     * @param {number} offset specifies at which hour of each day the aggregation starts
     * @param {number} nb_of_timeframe specifies the number of timeframes per aggregation cycle
     * 
     * Example: time_frame_len = 2, offset = 21, timeframe_nb = 3 delivers, beginning with the first 
     * day of the response:
     * aggregates: 
     *  1st day 21:00-23:00, 
     *  1st day 23:00 - 2nd day 01:00,
     *  2nd day 01:00 - 03:00,
     * 
     *  2nd day 21:00-23:00, 
     *  2nd day 23:00 - 3rd day 01:00,
     *  3rd day 01:00 - 03:00,
     * 
     *  ...
     * 
     * If the aggregates span over 00:00, the last day is cut off.
     * 
     */
    const aggregated = {};
    aggregated.timezone = data.timezone
    aggregated.timezone_abbreviation = data.timezone_abbreviation
    aggregated.latitude = data.latitude
    aggregated.longitude = data.longitude
    aggregated.elevation = data.elevation
    aggregated.units = data.hourly_units
    aggregated.time_frame_len = time_frame_len
    aggregated.nb_of_timeframes_per_cycle = time_frame_nb
    aggregated.offset = offset
    aggregated.timeframes = []
    delete aggregated.units.time
    for (let hour = 0; hour < data.hourly.time.length; hour++) {
        if (hour == offset) {
            for (i = 0; i < time_frame_nb; i++) {
                const time = luxon.DateTime.fromMillis(data.hourly.time.slice((hour + time_frame_len * i), (hour + time_frame_len * i) + time_frame_len).map(time_str => {
                    return luxon.DateTime.fromISO(time_str, { 'zone': data.timezone }).plus({ 'minutes': 30 })
                }).reduce((sum, date) => sum + date.toMillis(), 0) / time_frame_len).toISO()
                const temperature = data.hourly.temperature_2m.slice((hour + time_frame_len * i), (hour + time_frame_len * i) + time_frame_len).reduce((sum, val) => sum + val, 0) / time_frame_len
                const cloudcover = data.hourly.cloudcover.slice((hour + time_frame_len * i), (hour + time_frame_len * i) + time_frame_len).reduce((sum, val) => sum + val, 0) / time_frame_len
                aggregated.timeframes.push({
                    'time_frame_center': time,
                    'temperature_2m': temperature,
                    'cloudcover': cloudcover
                })

            }
            offset = offset + 24
        }

    }
    if (offset + time_frame_len * time_frame_nb > 23) {
        aggregated.timeframes = aggregated.timeframes.slice(0, aggregated.timeframes.length - time_frame_nb)
    }


    const observer = new Astronomy.Observer(aggregated.latitude, aggregated.longitude, aggregated.elevation);
    for (let timeframe of aggregated.timeframes) {
        astro_enrich_time_frame(timeframe, observer)
    }

    for (let timeframe of aggregated.timeframes) {
        calculate_suitability(timeframe)
    }
    return aggregated

}


function astro_enrich_time_frame(time_frame, observer) {
    /** Enriches a time frame object that contains a time_frame_center
     * with astronomical data, depending on the observer position. 
     */
    const date = new Date(time_frame.time_frame_center);
    const dDate = (new Date(date))
    dDate.setMinutes(date.getMinutes() + 1)



    let sun_eqd = Astronomy.Equator(Astronomy.Body.Sun, date, observer, true, false);
    let sun_hor = Astronomy.Horizon(date, observer, sun_eqd.ra, sun_eqd.dec, 'normal');
    time_frame.sun = {};
    time_frame.sun.azimuth = sun_hor.azimuth;
    time_frame.sun.altitude = sun_hor.altitude;
    sun_eqd = Astronomy.Equator(Astronomy.Body.Sun, dDate, observer, true, false);
    sun_hor = Astronomy.Horizon(dDate, observer, sun_eqd.ra, sun_eqd.dec, 'normal');
    if (sun_hor.altitude > time_frame.sun.altitude) { time_frame.sun.rising = true }
    else { time_frame.sun.rising = false }

    let moon_eqd = Astronomy.Equator(Astronomy.Body.Moon, date, observer, true, false);
    let moon_hor = Astronomy.Horizon(date, observer, moon_eqd.ra, moon_eqd.dec, 'normal');
    time_frame.moon = {};
    time_frame.moon.azimuth = moon_hor.azimuth;
    time_frame.moon.altitude = moon_hor.altitude;
    moon_eqd = Astronomy.Equator(Astronomy.Body.Moon, dDate, observer, true, false);
    moon_hor = Astronomy.Horizon(dDate, observer, moon_eqd.ra, moon_eqd.dec, 'normal');
    if (moon_hor.altitude > time_frame.moon.altitude) { time_frame.moon.rising = true }
    else { time_frame.moon.rising = false }

    /* The phase angle increases from 0 degrees to 360 degrees over the span of each synodic 
    month. Certain values of the phase angle define the four lunar quarters:
        0° = New Moon
        90° = First Quarter
        180° = Full Moon
        270° = Third Quarter */
    time_frame.moon.phase_angle = Astronomy.MoonPhase(date);
    return time_frame
}


function calc_sun_altitude_suit(sun_altitude) {
    /** calculates suitability of astro-photography in regard to the sun's altitude.
     * The sun's azimut is given given as angle (-180--+180), where negative degrees
     * indicate that the sun's position is below the horizon.
     * 
     * Civil twilight: sun is 0 to 6 degree below horizon.
     * Nautical twilight: sun is 6 to 12 degree below horizon.
     * Astronomical twilight: sun is 12 to 18 degree below horizon.
     * Night: sun is > 18 degree below horizon.
     * 
     * @param {number} sun_altitude Value in the interval (-180, 180].
     * 
     * @returns {number} value between 0 and 1 where 0 means not suitable and 1
     * means very suitable.
     */

    if (sun_altitude > 0) { return 0 }
    if (sun_altitude < -18) { return 1 }

    return (1 / 324) * Math.pow(sun_altitude, 2)
}

function calc_moon_phase_suit(moon_phase) {
    /** calculates suitability of atro-photography in regard to the moon phase.
     * The moon phase is given as an angle (0--360), where 0 degree represents New Moon and 
     * 180 degree Full Moon.
     * 
     * @param {number} moon_phase Value in the intervall [0, 360).
     * 
     * @returns {number} value between 0 and 1 where 0 means not suitable and 1
     * means very suitable.
     */

    if (moon_phase < 355 && moon_phase > 5) { return 0 }
    if (moon_phase >= 355) { moon_phase -= 360 }
    return -(1 / 25) * Math.pow(moon_phase, 2) + 1
}

function calc_moon_altitude_suit(moon_altitude) {
    /** calculates suitability of atro-photography in regard to the moon's altitude.
     * The moon's altitude is given given as angle (-180--+180), where negative degrees
     * indicate that the moon's position is below the horzion.
     * 
     * @param {number} moon_altitude Value in the intervall (-180, 180].
     * 
     * @returns {number} value between 0 and 1 where 0 means not suitable and 1
     * means very suitable.
     */

    // use same calculations as for sun, but shift them 6 degree (suitability for astro
    // photo starts growing when moon is 6 degree over horizon and reaches 1 at -12 degree.)

    moon_altitude = moon_altitude - 6

    if (moon_altitude > 0) { return 0 }
    if (moon_altitude < -18) { return 1 }

    return (1 / 324) * Math.pow(moon_altitude, 2)
}


function calc_cloudcover_suit(cloudcover) {
    /** calculates suitability of atro-photography in regard to cloudcover.
     * Cloudcover is given percentage of cloud covered sky.
     * 
     * @param {number} cloudcover Value from 0 to 100. Percent of cloud covered sky.
     * 
     * @returns {number} value between 0 and 1 where 0 means not suitable and 1
     * means very suitable.
     */

    if (cloudcover > 50) { return 0 }
    return -(1 / 2500) * Math.pow(cloudcover, 2) + 1
}

function calculate_suitability(time_frame) {
    time_frame.suit = {}
    suit_sun_altitude = calc_sun_altitude_suit(time_frame.sun.altitude)
    suit_moon_altitude = calc_moon_altitude_suit(time_frame.moon.altitude)
    suit_moon_phase = calc_moon_phase_suit(time_frame.moon.phase_angle)
    suit_cloudcover = calc_cloudcover_suit(time_frame.cloudcover)

    time_frame.suit.sun_altitude = suit_sun_altitude
    time_frame.suit.moon_altitude = suit_moon_altitude
    time_frame.suit.moon_phase = suit_moon_phase
    time_frame.suit.cloudcover = suit_cloudcover

    time_frame.suit.overall = suit_sun_altitude * suit_moon_altitude * suit_cloudcover
    // if near new moon, ignore altitude
    if (suit_moon_altitude < 1 && suit_moon_phase > 0) { time_frame.suit.overall = suit_sun_altitude * suit_moon_phase * suit_cloudcover }
    return time_frame
}




const ex_data = {
    "latitude": 51.135696,
    "longitude": 13.59375,
    "generationtime_ms": 5.203008651733398,
    "utc_offset_seconds": 7200,
    "timezone": "Europe/Berlin",
    "timezone_abbreviation": "CEST",
    "elevation": 137,
    "hourly_units": {
        "temperature_2m": "°C",
        "cloudcover": "%"
    },
    "hourly": {
        "time": [
            "2023-07-15T00:00",
            "2023-07-15T01:00",
            "2023-07-15T02:00",
            "2023-07-15T03:00",
            "2023-07-15T04:00",
            "2023-07-15T05:00",
            "2023-07-15T06:00",
            "2023-07-15T07:00",
            "2023-07-15T08:00",
            "2023-07-15T09:00",
            "2023-07-15T10:00",
            "2023-07-15T11:00",
            "2023-07-15T12:00",
            "2023-07-15T13:00",
            "2023-07-15T14:00",
            "2023-07-15T15:00",
            "2023-07-15T16:00",
            "2023-07-15T17:00",
            "2023-07-15T18:00",
            "2023-07-15T19:00",
            "2023-07-15T20:00",
            "2023-07-15T21:00",
            "2023-07-15T22:00",
            "2023-07-15T23:00",
            "2023-07-16T00:00",
            "2023-07-16T01:00",
            "2023-07-16T02:00",
            "2023-07-16T03:00",
            "2023-07-16T04:00",
            "2023-07-16T05:00",
            "2023-07-16T06:00",
            "2023-07-16T07:00",
            "2023-07-16T08:00",
            "2023-07-16T09:00",
            "2023-07-16T10:00",
            "2023-07-16T11:00",
            "2023-07-16T12:00",
            "2023-07-16T13:00",
            "2023-07-16T14:00",
            "2023-07-16T15:00",
            "2023-07-16T16:00",
            "2023-07-16T17:00",
            "2023-07-16T18:00",
            "2023-07-16T19:00",
            "2023-07-16T20:00",
            "2023-07-16T21:00",
            "2023-07-16T22:00",
            "2023-07-16T23:00",
            "2023-07-17T00:00",
            "2023-07-17T01:00",
            "2023-07-17T02:00",
            "2023-07-17T03:00",
            "2023-07-17T04:00",
            "2023-07-17T05:00",
            "2023-07-17T06:00",
            "2023-07-17T07:00",
            "2023-07-17T08:00",
            "2023-07-17T09:00",
            "2023-07-17T10:00",
            "2023-07-17T11:00",
            "2023-07-17T12:00",
            "2023-07-17T13:00",
            "2023-07-17T14:00",
            "2023-07-17T15:00",
            "2023-07-17T16:00",
            "2023-07-17T17:00",
            "2023-07-17T18:00",
            "2023-07-17T19:00",
            "2023-07-17T20:00",
            "2023-07-17T21:00",
            "2023-07-17T22:00",
            "2023-07-17T23:00",
            "2023-07-18T00:00",
            "2023-07-18T01:00",
            "2023-07-18T02:00",
            "2023-07-18T03:00",
            "2023-07-18T04:00",
            "2023-07-18T05:00",
            "2023-07-18T06:00",
            "2023-07-18T07:00",
            "2023-07-18T08:00",
            "2023-07-18T09:00",
            "2023-07-18T10:00",
            "2023-07-18T11:00",
            "2023-07-18T12:00",
            "2023-07-18T13:00",
            "2023-07-18T14:00",
            "2023-07-18T15:00",
            "2023-07-18T16:00",
            "2023-07-18T17:00",
            "2023-07-18T18:00",
            "2023-07-18T19:00",
            "2023-07-18T20:00",
            "2023-07-18T21:00",
            "2023-07-18T22:00",
            "2023-07-18T23:00",
            "2023-07-19T00:00",
            "2023-07-19T01:00",
            "2023-07-19T02:00",
            "2023-07-19T03:00",
            "2023-07-19T04:00",
            "2023-07-19T05:00",
            "2023-07-19T06:00",
            "2023-07-19T07:00",
            "2023-07-19T08:00",
            "2023-07-19T09:00",
            "2023-07-19T10:00",
            "2023-07-19T11:00",
            "2023-07-19T12:00",
            "2023-07-19T13:00",
            "2023-07-19T14:00",
            "2023-07-19T15:00",
            "2023-07-19T16:00",
            "2023-07-19T17:00",
            "2023-07-19T18:00",
            "2023-07-19T19:00",
            "2023-07-19T20:00",
            "2023-07-19T21:00",
            "2023-07-19T22:00",
            "2023-07-19T23:00",
            "2023-07-20T00:00",
            "2023-07-20T01:00",
            "2023-07-20T02:00",
            "2023-07-20T03:00",
            "2023-07-20T04:00",
            "2023-07-20T05:00",
            "2023-07-20T06:00",
            "2023-07-20T07:00",
            "2023-07-20T08:00",
            "2023-07-20T09:00",
            "2023-07-20T10:00",
            "2023-07-20T11:00",
            "2023-07-20T12:00",
            "2023-07-20T13:00",
            "2023-07-20T14:00",
            "2023-07-20T15:00",
            "2023-07-20T16:00",
            "2023-07-20T17:00",
            "2023-07-20T18:00",
            "2023-07-20T19:00",
            "2023-07-20T20:00",
            "2023-07-20T21:00",
            "2023-07-20T22:00",
            "2023-07-20T23:00",
            "2023-07-21T00:00",
            "2023-07-21T01:00",
            "2023-07-21T02:00",
            "2023-07-21T03:00",
            "2023-07-21T04:00",
            "2023-07-21T05:00",
            "2023-07-21T06:00",
            "2023-07-21T07:00",
            "2023-07-21T08:00",
            "2023-07-21T09:00",
            "2023-07-21T10:00",
            "2023-07-21T11:00",
            "2023-07-21T12:00",
            "2023-07-21T13:00",
            "2023-07-21T14:00",
            "2023-07-21T15:00",
            "2023-07-21T16:00",
            "2023-07-21T17:00",
            "2023-07-21T18:00",
            "2023-07-21T19:00",
            "2023-07-21T20:00",
            "2023-07-21T21:00",
            "2023-07-21T22:00",
            "2023-07-21T23:00",
            "2023-07-22T00:00",
            "2023-07-22T01:00",
            "2023-07-22T02:00",
            "2023-07-22T03:00",
            "2023-07-22T04:00",
            "2023-07-22T05:00",
            "2023-07-22T06:00",
            "2023-07-22T07:00",
            "2023-07-22T08:00",
            "2023-07-22T09:00",
            "2023-07-22T10:00",
            "2023-07-22T11:00",
            "2023-07-22T12:00",
            "2023-07-22T13:00",
            "2023-07-22T14:00",
            "2023-07-22T15:00",
            "2023-07-22T16:00",
            "2023-07-22T17:00",
            "2023-07-22T18:00",
            "2023-07-22T19:00",
            "2023-07-22T20:00",
            "2023-07-22T21:00",
            "2023-07-22T22:00",
            "2023-07-22T23:00",
            "2023-07-23T00:00",
            "2023-07-23T01:00",
            "2023-07-23T02:00",
            "2023-07-23T03:00",
            "2023-07-23T04:00",
            "2023-07-23T05:00",
            "2023-07-23T06:00",
            "2023-07-23T07:00",
            "2023-07-23T08:00",
            "2023-07-23T09:00",
            "2023-07-23T10:00",
            "2023-07-23T11:00",
            "2023-07-23T12:00",
            "2023-07-23T13:00",
            "2023-07-23T14:00",
            "2023-07-23T15:00",
            "2023-07-23T16:00",
            "2023-07-23T17:00",
            "2023-07-23T18:00",
            "2023-07-23T19:00",
            "2023-07-23T20:00",
            "2023-07-23T21:00",
            "2023-07-23T22:00",
            "2023-07-23T23:00",
            "2023-07-24T00:00",
            "2023-07-24T01:00",
            "2023-07-24T02:00",
            "2023-07-24T03:00",
            "2023-07-24T04:00",
            "2023-07-24T05:00",
            "2023-07-24T06:00",
            "2023-07-24T07:00",
            "2023-07-24T08:00",
            "2023-07-24T09:00",
            "2023-07-24T10:00",
            "2023-07-24T11:00",
            "2023-07-24T12:00",
            "2023-07-24T13:00",
            "2023-07-24T14:00",
            "2023-07-24T15:00",
            "2023-07-24T16:00",
            "2023-07-24T17:00",
            "2023-07-24T18:00",
            "2023-07-24T19:00",
            "2023-07-24T20:00",
            "2023-07-24T21:00",
            "2023-07-24T22:00",
            "2023-07-24T23:00",
            "2023-07-25T00:00",
            "2023-07-25T01:00",
            "2023-07-25T02:00",
            "2023-07-25T03:00",
            "2023-07-25T04:00",
            "2023-07-25T05:00",
            "2023-07-25T06:00",
            "2023-07-25T07:00",
            "2023-07-25T08:00",
            "2023-07-25T09:00",
            "2023-07-25T10:00",
            "2023-07-25T11:00",
            "2023-07-25T12:00",
            "2023-07-25T13:00",
            "2023-07-25T14:00",
            "2023-07-25T15:00",
            "2023-07-25T16:00",
            "2023-07-25T17:00",
            "2023-07-25T18:00",
            "2023-07-25T19:00",
            "2023-07-25T20:00",
            "2023-07-25T21:00",
            "2023-07-25T22:00",
            "2023-07-25T23:00",
            "2023-07-26T00:00",
            "2023-07-26T01:00",
            "2023-07-26T02:00",
            "2023-07-26T03:00",
            "2023-07-26T04:00",
            "2023-07-26T05:00",
            "2023-07-26T06:00",
            "2023-07-26T07:00",
            "2023-07-26T08:00",
            "2023-07-26T09:00",
            "2023-07-26T10:00",
            "2023-07-26T11:00",
            "2023-07-26T12:00",
            "2023-07-26T13:00",
            "2023-07-26T14:00",
            "2023-07-26T15:00",
            "2023-07-26T16:00",
            "2023-07-26T17:00",
            "2023-07-26T18:00",
            "2023-07-26T19:00",
            "2023-07-26T20:00",
            "2023-07-26T21:00",
            "2023-07-26T22:00",
            "2023-07-26T23:00",
            "2023-07-27T00:00",
            "2023-07-27T01:00",
            "2023-07-27T02:00",
            "2023-07-27T03:00",
            "2023-07-27T04:00",
            "2023-07-27T05:00",
            "2023-07-27T06:00",
            "2023-07-27T07:00",
            "2023-07-27T08:00",
            "2023-07-27T09:00",
            "2023-07-27T10:00",
            "2023-07-27T11:00",
            "2023-07-27T12:00",
            "2023-07-27T13:00",
            "2023-07-27T14:00",
            "2023-07-27T15:00",
            "2023-07-27T16:00",
            "2023-07-27T17:00",
            "2023-07-27T18:00",
            "2023-07-27T19:00",
            "2023-07-27T20:00",
            "2023-07-27T21:00",
            "2023-07-27T22:00",
            "2023-07-27T23:00",
            "2023-07-28T00:00",
            "2023-07-28T01:00",
            "2023-07-28T02:00",
            "2023-07-28T03:00",
            "2023-07-28T04:00",
            "2023-07-28T05:00",
            "2023-07-28T06:00",
            "2023-07-28T07:00",
            "2023-07-28T08:00",
            "2023-07-28T09:00",
            "2023-07-28T10:00",
            "2023-07-28T11:00",
            "2023-07-28T12:00",
            "2023-07-28T13:00",
            "2023-07-28T14:00",
            "2023-07-28T15:00",
            "2023-07-28T16:00",
            "2023-07-28T17:00",
            "2023-07-28T18:00",
            "2023-07-28T19:00",
            "2023-07-28T20:00",
            "2023-07-28T21:00",
            "2023-07-28T22:00",
            "2023-07-28T23:00",
            "2023-07-29T00:00",
            "2023-07-29T01:00",
            "2023-07-29T02:00",
            "2023-07-29T03:00",
            "2023-07-29T04:00",
            "2023-07-29T05:00",
            "2023-07-29T06:00",
            "2023-07-29T07:00",
            "2023-07-29T08:00",
            "2023-07-29T09:00",
            "2023-07-29T10:00",
            "2023-07-29T11:00",
            "2023-07-29T12:00",
            "2023-07-29T13:00",
            "2023-07-29T14:00",
            "2023-07-29T15:00",
            "2023-07-29T16:00",
            "2023-07-29T17:00",
            "2023-07-29T18:00",
            "2023-07-29T19:00",
            "2023-07-29T20:00",
            "2023-07-29T21:00",
            "2023-07-29T22:00",
            "2023-07-29T23:00",
            "2023-07-30T00:00",
            "2023-07-30T01:00",
            "2023-07-30T02:00",
            "2023-07-30T03:00",
            "2023-07-30T04:00",
            "2023-07-30T05:00",
            "2023-07-30T06:00",
            "2023-07-30T07:00",
            "2023-07-30T08:00",
            "2023-07-30T09:00",
            "2023-07-30T10:00",
            "2023-07-30T11:00",
            "2023-07-30T12:00",
            "2023-07-30T13:00",
            "2023-07-30T14:00",
            "2023-07-30T15:00",
            "2023-07-30T16:00",
            "2023-07-30T17:00",
            "2023-07-30T18:00",
            "2023-07-30T19:00",
            "2023-07-30T20:00",
            "2023-07-30T21:00",
            "2023-07-30T22:00",
            "2023-07-30T23:00"
        ],
        "temperature_2m": [
            18,
            17.6,
            17.8,
            18,
            18,
            18,
            18.5,
            20.9,
            24.4,
            27.6,
            29.7,
            30.7,
            31.8,
            32.9,
            33.8,
            34.5,
            34.9,
            35.1,
            34.9,
            33.9,
            30.5,
            27.5,
            26,
            21.9,
            20.3,
            19.7,
            19.5,
            19.3,
            19.7,
            19.4,
            19.4,
            20.2,
            22.1,
            22.5,
            21.1,
            25.1,
            25.9,
            27,
            27.1,
            28.4,
            28.8,
            28.7,
            28,
            27.3,
            25.3,
            22.4,
            20.7,
            19.6,
            18.9,
            18.3,
            18,
            17.6,
            17.6,
            18.6,
            19.9,
            20.6,
            22.6,
            25.1,
            26.6,
            27.4,
            28,
            28.7,
            29.6,
            27.9,
            25.7,
            24.6,
            23.8,
            24,
            23.3,
            21,
            18.6,
            16.9,
            16,
            15.3,
            14.7,
            14.1,
            14.1,
            13.4,
            13.6,
            15.8,
            17.9,
            19.8,
            21.4,
            22.7,
            23.9,
            24.7,
            25.5,
            26,
            26.3,
            26.3,
            26,
            24.7,
            22.2,
            20.6,
            20.5,
            18.6,
            17.9,
            17.3,
            16.8,
            16.4,
            16.2,
            16,
            16.5,
            19.2,
            21.8,
            24.1,
            26,
            27.4,
            28,
            29,
            29.7,
            29.5,
            29.6,
            27.4,
            24.5,
            23.6,
            22.8,
            19.7,
            18.2,
            17.2,
            18.2,
            16.1,
            15.4,
            14.7,
            14,
            13.9,
            14.7,
            16.1,
            17.5,
            18.5,
            19.5,
            20.4,
            21,
            21.5,
            21.9,
            22.2,
            22.4,
            22.4,
            22.2,
            21.8,
            20.9,
            19,
            16.7,
            14.9,
            14,
            13.7,
            13.7,
            13.8,
            14.3,
            15,
            16,
            17.4,
            18.9,
            20.6,
            22.5,
            24.1,
            25.3,
            26.3,
            27,
            27.8,
            28.4,
            27.7,
            24.3,
            19.6,
            16,
            14.5,
            14.2,
            14,
            13.8,
            13.7,
            13.7,
            13.3,
            12.9,
            13,
            14,
            15.6,
            17.3,
            19.1,
            21.2,
            23,
            24.7,
            26.3,
            26.9,
            25.8,
            23.8,
            21.9,
            20.3,
            18.7,
            17.4,
            16.3,
            15.4,
            14.7,
            14.1,
            13.7,
            13.4,
            13,
            12.6,
            12.6,
            12.9,
            13.5,
            14.2,
            14.9,
            15.8,
            16.9,
            18.6,
            20.6,
            21.9,
            22,
            21.4,
            20.8,
            20.4,
            20.1,
            19.5,
            18.5,
            17.3,
            16.2,
            15.2,
            14.4,
            13.7,
            13,
            12.5,
            12.7,
            14,
            16.1,
            18.1,
            19.8,
            21.3,
            22.7,
            23.7,
            24.4,
            24.9,
            25.1,
            25.2,
            24.9,
            24.1,
            23,
            22,
            21.3,
            20.8,
            20.1,
            19.1,
            18,
            17.1,
            16.2,
            15.6,
            15.8,
            17.2,
            19.5,
            21.8,
            24,
            26.2,
            28,
            28.9,
            29.4,
            29.7,
            29.9,
            30,
            29.5,
            28.2,
            26.3,
            24.7,
            23.4,
            22.3,
            21.3,
            20.3,
            19.5,
            18.7,
            18,
            17.3,
            16.8,
            16.3,
            15.9,
            15.6,
            15.5,
            15.5,
            15.6,
            15.7,
            15.8,
            15.9,
            15.9,
            15.8,
            15.7,
            15.5,
            15.3,
            15.3,
            15.5,
            15.8,
            15.9,
            15.6,
            15,
            14.6,
            14.2,
            13.8,
            14,
            15,
            16.5,
            17.9,
            19.1,
            20.2,
            21.2,
            22,
            22.5,
            22.8,
            22.5,
            21.8,
            21.1,
            20.5,
            20,
            19.3,
            18.1,
            16.7,
            15.7,
            15.2,
            15.1,
            15,
            14.7,
            14.4,
            14.5,
            15,
            15.9,
            17,
            18.4,
            20,
            21.4,
            22.4,
            23.2,
            23.6,
            23.6,
            23.2,
            22.6,
            21.7,
            20.5,
            19.3,
            17.9,
            16.4,
            15.3,
            14.5,
            14.1,
            13.8,
            13.5,
            13.4,
            13.7,
            14.6,
            15.9,
            17.3,
            18.9,
            20.6,
            21.9,
            22.4,
            22.4,
            22.5,
            22.9,
            23.4,
            23.5,
            22.8,
            21.7,
            20.6,
            19.4,
            18.2,
            17.1,
            16,
            14.9,
            13.9,
            12.9,
            12,
            11.6,
            12.1,
            13.2,
            14.1,
            14.4,
            14.6,
            14.9,
            15.5,
            16.2,
            16.6,
            16.3,
            15.6,
            15.2,
            15.2,
            15.3,
            15.3,
            14.7,
            13.8,
            13.2
        ],
        "cloudcover": [
            16,
            18,
            14,
            13,
            8,
            15,
            16,
            11,
            6,
            12,
            13,
            16,
            13,
            54,
            10,
            5,
            5,
            76,
            94,
            54,
            8,
            0,
            7,
            100,
            93,
            100,
            100,
            100,
            100,
            100,
            100,
            93,
            57,
            78,
            100,
            22,
            90,
            43,
            62,
            6,
            0,
            26,
            100,
            100,
            5,
            0,
            0,
            0,
            0,
            0,
            0,
            6,
            46,
            100,
            100,
            100,
            71,
            42,
            23,
            5,
            0,
            0,
            19,
            100,
            100,
            100,
            100,
            100,
            100,
            100,
            31,
            18,
            59,
            17,
            20,
            11,
            60,
            15,
            7,
            16,
            13,
            15,
            17,
            89,
            68,
            100,
            96,
            11,
            7,
            9,
            62,
            100,
            100,
            100,
            100,
            84,
            7,
            5,
            0,
            7,
            8,
            17,
            17,
            13,
            0,
            0,
            0,
            32,
            79,
            1,
            0,
            10,
            10,
            5,
            7,
            9,
            52,
            70,
            82,
            44,
            100,
            5,
            11,
            10,
            9,
            8,
            32,
            56,
            80,
            86,
            93,
            99,
            99,
            100,
            100,
            100,
            100,
            100,
            87,
            75,
            62,
            64,
            67,
            69,
            78,
            86,
            95,
            96,
            98,
            99,
            84,
            69,
            54,
            65,
            75,
            86,
            86,
            86,
            86,
            81,
            75,
            70,
            80,
            90,
            100,
            78,
            55,
            33,
            23,
            12,
            2,
            1,
            1,
            0,
            22,
            45,
            67,
            76,
            84,
            93,
            76,
            59,
            42,
            61,
            81,
            100,
            100,
            100,
            100,
            100,
            100,
            100,
            100,
            100,
            100,
            100,
            100,
            100,
            87,
            74,
            61,
            71,
            81,
            91,
            76,
            61,
            46,
            53,
            61,
            68,
            79,
            89,
            100,
            100,
            100,
            100,
            92,
            84,
            76,
            65,
            54,
            43,
            46,
            48,
            51,
            67,
            82,
            98,
            99,
            99,
            100,
            100,
            100,
            100,
            100,
            100,
            100,
            100,
            100,
            100,
            75,
            49,
            24,
            29,
            34,
            39,
            58,
            77,
            96,
            96,
            97,
            97,
            98,
            99,
            100,
            100,
            99,
            99,
            97,
            94,
            92,
            95,
            97,
            100,
            100,
            100,
            100,
            100,
            100,
            100,
            100,
            100,
            100,
            100,
            100,
            100,
            100,
            100,
            100,
            100,
            100,
            100,
            100,
            100,
            100,
            100,
            100,
            100,
            95,
            91,
            86,
            81,
            77,
            72,
            65,
            57,
            50,
            47,
            45,
            42,
            49,
            55,
            62,
            61,
            60,
            59,
            56,
            54,
            51,
            55,
            60,
            64,
            47,
            30,
            13,
            14,
            15,
            16,
            13,
            11,
            8,
            19,
            29,
            40,
            54,
            67,
            81,
            86,
            92,
            97,
            98,
            99,
            100,
            88,
            75,
            63,
            54,
            46,
            37,
            28,
            18,
            9,
            15,
            22,
            28,
            19,
            11,
            2,
            14,
            27,
            39,
            59,
            80,
            100,
            100,
            100,
            100,
            100,
            100,
            100,
            100,
            100,
            100,
            100,
            100,
            100,
            90,
            81,
            71,
            71,
            72,
            72,
            81,
            91,
            100,
            99,
            97,
            96,
            97,
            99,
            100,
            100,
            99,
            99
        ]
    }
}